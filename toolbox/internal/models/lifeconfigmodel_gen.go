// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lifeConfigFieldNames          = builder.RawFieldNames(&LifeConfig{})
	lifeConfigRows                = strings.Join(lifeConfigFieldNames, ",")
	lifeConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(lifeConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lifeConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(lifeConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLifeConfigIdPrefix = "cache:lifeConfig:id:"
)

type (
	lifeConfigModel interface {
		Insert(ctx context.Context, data LifeConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LifeConfig, error)
		Update(ctx context.Context, data *LifeConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLifeConfigModel struct {
		sqlc.CachedConn
		table string
	}

	LifeConfig struct {
		Id                int64          `db:"id"`                 // 记录ID
		ConfigId          int64          `db:"config_id"`          // 相册id
		ImgUrl            string         `db:"img_url"`            // 图片路由
		Text              sql.NullString `db:"text"`               // 文案
		Status            int64          `db:"status"`             // 开启状态 1：未启用 2: 启用
		HorizontalVersion int64          `db:"horizontal_version"` // 是否为横向排版 0：否 1：是
		CreateTime        time.Time      `db:"create_time"`        // 创建时间
		UpdateTime        sql.NullTime   `db:"update_time"`        // 更新时间
	}
)

func newLifeConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLifeConfigModel {
	return &defaultLifeConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`life_config`",
	}
}

func (m *defaultLifeConfigModel) Delete(ctx context.Context, id int64) error {
	lifeConfigIdKey := fmt.Sprintf("%s%v", cacheLifeConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, lifeConfigIdKey)
	return err
}

func (m *defaultLifeConfigModel) FindOne(ctx context.Context, id int64) (*LifeConfig, error) {
	lifeConfigIdKey := fmt.Sprintf("%s%v", cacheLifeConfigIdPrefix, id)
	var resp LifeConfig
	err := m.QueryRowCtx(ctx, &resp, lifeConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lifeConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLifeConfigModel) Insert(ctx context.Context, data LifeConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, lifeConfigRowsExpectAutoSet)
	ret, err := m.ExecNoCacheCtx(ctx, query, data.ConfigId, data.ImgUrl, data.Text, data.Status, data.HorizontalVersion)
	return ret, err
}

func (m *defaultLifeConfigModel) Update(ctx context.Context, data *LifeConfig) error {
	lifeConfigIdKey := fmt.Sprintf("%s%v", cacheLifeConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lifeConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ConfigId, data.ImgUrl, data.Text, data.Status, data.HorizontalVersion, data.Id)
	}, lifeConfigIdKey)
	return err
}

func (m *defaultLifeConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLifeConfigIdPrefix, primary)
}

func (m *defaultLifeConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lifeConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLifeConfigModel) tableName() string {
	return m.table
}
